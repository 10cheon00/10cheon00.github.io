{"version":3,"file":"component---src-templates-tags-js-41bfa3d48b2bbb569418.js","mappings":"yJAmCA,IAhCe,IAAoC,IAAnC,SAAEA,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EAD6B,MAChBH,EAASI,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,EAEA,sBAAIG,UAAU,gBACZ,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAKP,IAKhB,gBAAC,EAAAM,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCP,GAML,uBAAKK,UAAU,iBAAiB,oBAAmBH,GACjD,0BAAQG,UAAU,iBAAiBD,GACnC,4BAAOH,GACP,8BAAQ,MACH,IAAIO,MAAOC,cAAc,eAC5B,IACA,qBAAGC,KAAK,4BAA2B,WAEjC,C,+CCkBV,IAvCY,IAAuC,IAAD,MAArC,YAAEC,EAAW,MAAEX,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEW,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApB,EAAGJ,EAAKG,oBAAY,aAAjB,EAAmBf,MAExC,OACE,gCACE,6BAAQgB,EAAkBhB,EAAK,MAAMgB,EAAiBhB,GACtD,wBAAMiB,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASlB,IACnC,wBAAMmB,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YAChCjB,EAQH,C,0ECXJ,UA5Ba,IAAsC,IAArC,YAAEmB,EAAW,KAAEC,EAAI,SAAEtB,GAAU,EAC3C,MAAM,IAAEuB,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAYL,EAAKT,KAAKG,aAAaf,MACnC2B,EAAeH,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,iBACZF,EAAG,IAEpB,OACE,gBAAC,IAAM,CAACvB,SAAUA,EAAUC,MAAO0B,GACjC,gBAAC,IAAG,CAAC1B,MAAO2B,IACZ,0BAAKA,GACL,0BACGJ,EAAMK,KAAI,IAAe,IAAd,KAAEC,GAAM,EAClB,MAAM,KAAEC,GAASD,EAAKE,QAChB,MAAE/B,EAAK,KAAEgC,GAASH,EAAKI,YAC7B,OACE,sBAAIC,IAAKJ,GACP,gBAAC,EAAAxB,KAAI,CAACC,GAAIuB,GAAO9B,EAAM,MAAIgC,GACxB,KAIX,gBAAC,EAAA1B,KAAI,CAACC,GAAG,SAAQ,YACV,C","sources":["webpack://archive-of-10cheon00/./src/components/layout.js","webpack://archive-of-10cheon00/./src/components/seo.js","webpack://archive-of-10cheon00/./src/templates/tags.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              github\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      {children}\n    </>\n    // <meta name=\"twitter:card\" content=\"summary\" />\n    // <meta\n    //   name=\"twitter:creator\"\n    //   content={site.siteMetadata?.social?.twitter || ``}\n    // />\n    // <meta name=\"twitter:title\" content={title} />\n    // <meta name=\"twitter:description\" content={metaDescription} />\n  )\n}\n\nexport default Seo\n","import React from \"react\"\n\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Seo title={tagHeader} />\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title, date } = node.frontmatter\n          return (\n            <li key={slug}>\n              <Link to={slug}>{title} | {date}</Link>\n            </li>\n          )\n        })}\n      </ul>\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: {frontmatter: {date: ASC}}\n      filter: {frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["location","title","children","isRootPath","pathname","header","className","Link","to","Date","getFullYear","href","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","pageContext","data","tag","edges","totalCount","allMarkdownRemark","siteTitle","tagHeader","map","node","slug","fields","date","frontmatter","key"],"sourceRoot":""}