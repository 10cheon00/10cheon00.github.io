{"componentChunkName":"component---src-templates-category-js","path":"/categories/Study/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"allMarkdownRemark":{"nodes":[{"excerpt":"Method Security 이전에 Authorization에 대해 공부했을 땐 로 명시된 클래스에서 직접 모든 경로에 대해 authorization을 지정했다. 그러나 세세한 엔드포인트에 대해 authorization…","fields":{"slug":"/til/24-1-31-Spring-Security-Method-Authorization/"},"frontmatter":{"date":null,"title":"24-1-31 Spring Security Method Authorization","tags":["TIL","spring"]}},{"excerpt":"Spring Security 6.2.1을 사용했습니다. Authorization 직역하면 허가, 인증 그런 뜻이다. 자원에 대한 접근 권한을 Authority라고 하고, 사용자가 그 권한을 갖고 있는지 검사하는걸 Authorization…","fields":{"slug":"/til/24-1-26-Spring-Security-Authorization/"},"frontmatter":{"date":"January 26, 2024","title":"24-1-26 Spring Security Authorization","tags":["TIL","spring"]}},{"excerpt":"docker network 각 컨테이너가 외부 또는 다른 컨테이너와 상호작용하려면 도커의 네트워크를 이해해야한다. 컨테이너가 생성될 때 네트워크 설정을 하지 않았다면  네트워크로 연결된다. 각 네트워크는 Driver와 Scope…","fields":{"slug":"/til/24-1-22-docker-network/"},"frontmatter":{"date":"January 22, 2024","title":"24-1-22 docker network","tags":["TIL","docker"]}},{"excerpt":"docker-compose로 mysql과 spring boot 앱을 같이 올려보려고 했는데, mysql은 정상적으로 초기화 되었지만 spring boot 앱이 자꾸 mysql과 연결되지 못해 에러를 내었다. 이 부분은 조금 더 공부해야겠다. mysql…","fields":{"slug":"/til/24-1-18-Spring-Security-비밀번호-로그인/"},"frontmatter":{"date":"January 18, 2024","title":"24-1-18 Spring Security 비밀번호 로그인","tags":["TIL","spring"]}},{"excerpt":"docker-compose로 mysql과 spring boot 앱을 같이 올려보려고 했는데, mysql은 정상적으로 초기화 되었지만 spring boot 앱이 자꾸 mysql과 연결되지 못해 에러를 내었다. 이 부분은 조금 더 공부해야겠다. mysql…","fields":{"slug":"/til/24-1-18-spring-security/"},"frontmatter":{"date":"January 18, 2024","title":"24-1-18 Spring Security 비밀번호 로그인","tags":["TIL","spring"]}},{"excerpt":"docker build 를 통해 Dockerfile에 명시된 설정대로 image를 생성한다. 생성된 이미지는 을 통해 컨테이너에 담겨 실행된다. Spring boot 로컬 환경에서 개발하고 있는 Spring boot…","fields":{"slug":"/til/24-1-12-docker-build/"},"frontmatter":{"date":"January 12, 2024","title":"24-1-12 docker build","tags":["TIL","docker"]}},{"excerpt":"docker란 초보를 위한 도커 안내서 - 도커란 무엇인가를 보고 도커가 어떤건지 대략 이해했다. 옛날에는 가상화를 한다면 VMWare같은 OS를 가상화하는 방법을 사용했었다. 도커는 OS위에 OS…","fields":{"slug":"/til/24-1-11-docker-이해하기/"},"frontmatter":{"date":"January 11, 2024","title":"24-1-11 docker 이해하기","tags":["TIL","docker"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V 2판입니다. 메모리별 특징 SRAM…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(7)-메모리-계층-및-캐시/"},"frontmatter":{"date":"January 04, 2024","title":"컴퓨터 구조론 (7) - 메모리 계층 및 캐시","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(6)-분기-하자드/"},"frontmatter":{"date":"January 04, 2024","title":"컴퓨터 구조론 (6) - 분기 하자드","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V 2판입니다. 데이터 하자드 파이프라인 데이터 패스를 통해 다음 명령어를 실행해보자.  PC값은…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(5)-데이터-하자드/"},"frontmatter":{"date":"January 04, 2024","title":"컴퓨터 구조론 (5) - 데이터 하자드","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V 2판입니다. 단일 사이클 데이터 패스의 문제 element…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(4)-데이터패스-(2)/"},"frontmatter":{"date":"January 03, 2024","title":"컴퓨터 구조론 (4) - 데이터 패스 (2)","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V 2판입니다. 흐름 CPU가 명령어를 해독하고 실행하는 과정을 간략하게 나타내면 이렇다. 명령어를 메모리에서 인출해온다. 프로그램 카운터(PC…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(3)-데이터패스-(1)/"},"frontmatter":{"date":"January 02, 2024","title":"컴퓨터 구조론 (3) - 데이터 패스 (1)","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 네트워크 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 네트워킹 하향식 접근 8판입니다. 용어 Confidentiality…","fields":{"slug":"/computer-network/보안/"},"frontmatter":{"date":"December 15, 2023","title":"보안","tags":["computer-network"]}},{"excerpt":"2023년 2학기 컴퓨터 네트워크 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 네트워킹 하향식 접근 8판입니다. 무선 네트워크의 구성 요소  Wireless host : 무선 기기(노드) Base Station…","fields":{"slug":"/computer-network/무선-모바일-네트워크/"},"frontmatter":{"date":"November 25, 2023","title":"무선, 모바일 네트워크","tags":["computer-network"]}},{"excerpt":"2023년 2학기 컴퓨터 네트워크 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 네트워킹 하향식 접근 8판입니다. 링크 레이어의 역할 물리적으로 연결된 두 노드 사이에서 frame…","fields":{"slug":"/computer-network/링크-레이어/"},"frontmatter":{"date":"November 16, 2023","title":"링크 레이어","tags":["computer-network"]}},{"excerpt":"Annotation은 영어로 번역했을 때 주석이라는 뜻을 갖는다. 주석은 코드의 흐름에 영향을 주지 않는다. 하지만 코드를 보는 사람으로 하여금 어떤 코드인지 이해하게 만들고 함수 또는 라이브러리를 어떤 상황에 써야하는지 설명한다. Java…","fields":{"slug":"/java/annotation/"},"frontmatter":{"date":"November 06, 2023","title":"Annotation","tags":["java"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V 2판입니다. 컴퓨터는 명령어에 의해 동작한다. CPU…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(2)-명령어-구조/"},"frontmatter":{"date":"October 26, 2023","title":"컴퓨터 구조론 (2) - 명령어 구조","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 구조론 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 구조 및 설계 RISC-V 2판입니다.\n컴퓨터 추상화 및 관련 기술인데 CPU 성능을 측정하는 방법밖에 기억나지 않는다. :( 컴퓨터 구조 분야의…","fields":{"slug":"/computer-organization/컴퓨터-구조론-(1)-컴퓨터-추상화-및-관련-기술/"},"frontmatter":{"date":"October 26, 2023","title":"컴퓨터 구조론 (1) - 컴퓨터 추상화 및 관련 기술","tags":["computer-organization"]}},{"excerpt":"2023년 2학기 컴퓨터 네트워크 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 네트워킹 하향식 접근 8판입니다. 컨트롤 영역 네트워크는 데이터 영역과 컨트롤 영역으로 나뉨. 컨트롤 영역의 구조는 두 가지가 있음 per-router control…","fields":{"slug":"/computer-network/네트워크-레이어-(2)/"},"frontmatter":{"date":"October 20, 2023","title":"네트워크 레이어 (2)","tags":["computer-network"]}},{"excerpt":"2023년 2학기 컴퓨터 네트워크 수업을 듣고 정리한 내용입니다. 수업 교재는 컴퓨터 네트워킹 하향식 접근 8판입니다. 데이터 영역 라우터 내부의 로직 라우터로 들어온 패킷이 어느 포트로 나가야할 지 결정 input port - switch…","fields":{"slug":"/computer-network/네트워크-레이어-(1)/"},"frontmatter":{"date":"October 06, 2023","title":"네트워크 레이어 (1)","tags":["computer-network"]}},{"excerpt":"몇 가지 처음 보는 키워드들을 정리해보았다. as 영어사전에서 as는 '~처럼', '~때문에', '~로서' 등의 의미가 있지만 C…","fields":{"slug":"/csharp/Csharp의-키워드/"},"frontmatter":{"date":"August 25, 2023","title":"Csharp의 키워드","tags":["csharp"]}},{"excerpt":"record 는 주로 변하지 않는, immutable한 데이터를 다루기 위해 도입되었다. C#9부터 추가된 키워드인 새로운 참조 형식이다. C#1…","fields":{"slug":"/csharp/record/"},"frontmatter":{"date":"August 23, 2023","title":"record","tags":["csharp"]}},{"excerpt":"동기 인터페이스에 기본 메서드를 구현한 다음 그 인터페이스를 구현하는 클래스에서 기본 메서드를 호출하려고 하니 에러가 생겼다. 에러 메시지는 이렇다. /tmp/C2ywkFh53T.cs(27,11): error CS1061: 'HelloWorld.B…","fields":{"slug":"/csharp/interface에-구현한-메서드를-클래스에서-접근할-수-없는-이유/"},"frontmatter":{"date":"August 22, 2023","title":"interface에 구현한 메서드를 클래스에서 접근할 수 없는 이유","tags":["csharp"]}},{"excerpt":"Array 는 정적인 크기를 가지는 1차원 배열이다. 처럼 고정된 크기를 갖는 배열을 의미한다. 몇 가지 유용한 도구 메서드들이 클래스에 구현되어 있지만 사용자가 직접  클래스를 상속하여 다른 모습의 배열을 만들 수는 없다. 시작 인덱스는…","fields":{"slug":"/csharp/Array와-List/"},"frontmatter":{"date":"August 21, 2023","title":"Array와 List","tags":["csharp"]}},{"excerpt":"의도 객체 구조를 이루는 원소에 대해 수행할 연산을 표현한다. 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있다. UML  방문자(Visitor) 인터페이스는 객체 즉, Element…","fields":{"slug":"/design-patterns/방문자-패턴/"},"frontmatter":{"date":"August 17, 2023","title":"방문자 패턴","tags":["design-pattern"]}},{"excerpt":"의도 알고리즘의 뼈대만 정의하고 각 단계에서 수행할 구체적 처리는 서브 클래스 쪽으로 미룬다. 서브 클래스에서 알고리즘의 각 단계를 재정의하여 구현한다. UML  AbstractClass…","fields":{"slug":"/design-patterns/템플릿-메서드-패턴/"},"frontmatter":{"date":"August 15, 2023","title":"템플릿 메서드 패턴","tags":["design-pattern"]}},{"excerpt":"의도 동일 계열의 알고리즘 군을 정의하고, 각 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도록 만든다. 알고리즘을 사용하는 클라이언트와 상관없이 독립적으로 변경할 수 있도록 한다. UML  알고리즘(Strategy…","fields":{"slug":"/design-patterns/전략-패턴/"},"frontmatter":{"date":"August 14, 2023","title":"전략 패턴","tags":["design-pattern"]}},{"excerpt":"암시적 형변환 암시적 형변환은 여러 상황에서 일어난다. 대표적으로 function member invocation…","fields":{"slug":"/csharp/Csharp의-형변환/"},"frontmatter":{"date":"August 10, 2023","title":"Csharp의 형변환","tags":["csharp"]}},{"excerpt":"Boxing…","fields":{"slug":"/csharp/Boxing과-Unboxing/"},"frontmatter":{"date":"August 10, 2023","title":"Boxing과 Unboxing","tags":["csharp"]}},{"excerpt":"의도 객체의 내부 상태에 따라 행동을 변경한다. 이 때 객체가 자신의 클래스를 변경하는 것처럼 보이게 된다. UML  객체(Context)는 구체적인 상태를 갖기 위해 어떤 상태(State) 추상 클래스를 상속한 객체를 참조한다. State…","fields":{"slug":"/design-patterns/상태-패턴/"},"frontmatter":{"date":"August 09, 2023","title":"상태 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체 사이에 일 대 다 관계를 정의하여 어떤 객체의 상태가 변했을 때 모든 객체가 자동으로 그 변화를 통지받아 갱신되도록 만든다. UML  Subject는 여러 Observer…","fields":{"slug":"/design-patterns/옵저버-패턴/"},"frontmatter":{"date":"August 08, 2023","title":"옵저버 패턴","tags":["design-pattern"]}},{"excerpt":"의도 캡슐화를 위배하지 않으면서 어떤 객체의 내부 상태를 잡아내고 실체화시켜두어 나중에 객체가 저장해둔 상태로 되돌아오도록 한다. UML  Originator…","fields":{"slug":"/design-patterns/메멘토-패턴/"},"frontmatter":{"date":"August 07, 2023","title":"메멘토 패턴","tags":["design-pattern"]}},{"excerpt":"의도 한 집합에 속해있는 객체의 상호작용을 캡슐화하는 객체를 정의한다. 객체들이 서로를 참조하지 않고 중재자 객체를 참조하도록 하여 과도한 결합을 줄인다. UML  상호작용을 할 객체(Colleague)들은 모두 mediator…","fields":{"slug":"/design-patterns/중재자-패턴/"},"frontmatter":{"date":"August 06, 2023","title":"중재자 패턴","tags":["design-pattern"]}},{"excerpt":"…","fields":{"slug":"/design-patterns/인터프리터-패턴/"},"frontmatter":{"date":"August 05, 2023","title":"인터프리터 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체의 내부 표현부를 노출하지 않으면서 집합에 속한 원소들을 순회하는 방법을 제공한다. 리스트 객체에 접근해서 새로운 내용을 삽입, 삭제 또는 순회하는 내용을 반복자 객체에 정의하여 집합 객체의 인터페이스를 확장시키지 않게 된다. UML…","fields":{"slug":"/design-patterns/반복자-패턴/"},"frontmatter":{"date":"August 02, 2023","title":"반복자 패턴","tags":["design-pattern"]}},{"excerpt":"의도 요청 자체를 캡슐화하는 것이다. 이를 통해 사용자를 서로 다른 요청으로 매개변수화하거나, 요청을 로깅 또는 대기시킬 수 있고, 되돌릴 수 있는 연산을 지원한다. UML  Receiver…","fields":{"slug":"/design-patterns/명령-패턴/"},"frontmatter":{"date":"July 31, 2023","title":"명령 패턴","tags":["design-pattern"]}},{"excerpt":"의도 메시지를 보내는 객체와 이를 받아 처리하는 객체들 간의 결합도를 낮춘다. 어떤 요청을 받았을 때 그 요청을 처리할 수 없다면 자신과 연결된 객체에게 전달하여 모든 객체가 그 요청을 처리할 수 있도록 설계한다. UML  Handler…","fields":{"slug":"/design-patterns/책임-연쇄-패턴/"},"frontmatter":{"date":"July 30, 2023","title":"책임 연쇄 패턴","tags":["design-pattern"]}},{"excerpt":"의도 다른 객체에 대한 접근을 제어하기 위한 대리자 또는 Placeholder 역할을 하는 객체를 두기 위해 쓴다. UML  RealSubject는 Subject 인터페이스를 상속한 서브 클래스다. 사용자는 Subject…","fields":{"slug":"/design-patterns/프록시-패턴/"},"frontmatter":{"date":"July 29, 2023","title":"프록시 패턴","tags":["design-pattern"]}},{"excerpt":"의도 공유를 통해 다수의 작은 객체들을 지원한다. 수많은 객체가 하나의 클래스에 대해 각각의 인스턴스를 갖게 하기보다 미리 생성해놓은 인스턴스의 참조자를 가지도록 만드는 것이다. UML  사용자(Client)는 팩토리(FlyweightFactory…","fields":{"slug":"/design-patterns/플라이웨이트-패턴/"},"frontmatter":{"date":"July 28, 2023","title":"플라이웨이트 패턴","tags":["design-pattern"]}},{"excerpt":"의도 한 서브 시스템 내의 인터페이스 집합에 대한 획일화된 하나의 인터페이스를 제공하는 패턴으로, 서브 시스템을 사용하기 쉽도록 상위 수준의 인터페이스를 정의한다. UML…","fields":{"slug":"/design-patterns/퍼사드-패턴/"},"frontmatter":{"date":"July 27, 2023","title":"퍼사드 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체에 동적으로 새로운 책임을 추가한다. 기능을 추가할 때 서브 클래스를 만드는 것보다 더 쉬운 방법을 제공한다. UML  컴포지트 패턴처럼 기초가 될 Component 추상 클래스를 정의한다. Component…","fields":{"slug":"/design-patterns/데코레이터-패턴/"},"frontmatter":{"date":"July 26, 2023","title":"데코레이터 패턴","tags":["design-pattern"]}},{"excerpt":"의도 부분과 전체의 계층을 표현하기 위해 객체들을 트리 구조로 구성한다. 사용자는 기본 객체와 복합 객체(컴포지트 객체)를 동일하게 다룰 수 있게 된다. UML  추상 클래스 Component를 정의한다. 추상 클래스 내에는 다른 Component…","fields":{"slug":"/design-patterns/컴포지트-패턴/"},"frontmatter":{"date":"July 25, 2023","title":"컴포지트 패턴","tags":["design-pattern"]}},{"excerpt":"의도 구체적인 구현을 가진 클래스에서 추상적 요소를 분리하여 다양성을 가질 수 있도록 설계한다. UML…","fields":{"slug":"/design-patterns/브릿지-패턴/"},"frontmatter":{"date":"July 24, 2023","title":"브릿지 패턴","tags":["design-pattern"]}},{"excerpt":"의도 클래스의 인터페이스를 사용자가 기대하는 인터페이스로 적응(Adapt)시킨다. 클래스 어댑터(상속을 통해 구현) UML  Target 클래스에 메서드를 정의하는데, 추상 클래스의 서브 클래스에서 Adaptee…","fields":{"slug":"/design-patterns/어댑터-패턴/"},"frontmatter":{"date":"July 23, 2023","title":"어댑터 패턴","tags":["design-pattern"]}},{"excerpt":"의도 오직 한 개의 클래스 인스턴스만을 갖도록 하고 그 인스턴스를 전역적으로 접근할 수 있게 한다. UML  싱글턴 클래스는 자기 자신을 으로 제공한다. 외부에서 싱글턴 클래스에 접근하기 위해서는 static…","fields":{"slug":"/design-patterns/싱글턴-패턴/"},"frontmatter":{"date":"July 22, 2023","title":"싱글턴 패턴","tags":["design-pattern"]}},{"excerpt":"의도 프로토타입이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 이렇게 만든 견본을 복사하여 새로운 객체를 생성한다. UML…","fields":{"slug":"/design-patterns/프로토타입-패턴/"},"frontmatter":{"date":"July 21, 2023","title":"프로토타입 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할 지에 대한 결정은 서브 클래스가 내리도록 한다. UML…","fields":{"slug":"/design-patterns/팩토리-메서드-패턴/"},"frontmatter":{"date":"July 19, 2023","title":"팩토리 메서드 패턴","tags":["design-pattern"]}},{"excerpt":"의도 복잡한 객체를 생성하는 방법을 표현하는 방법을 정의한 클래스로부터 분리하여, 서로 다른 객체를 생성할 때 동일한 과정을 통해 생성하도록 한다. UML…","fields":{"slug":"/design-patterns/빌더-패턴/"},"frontmatter":{"date":"July 18, 2023","title":"빌더 패턴","tags":["design-pattern"]}},{"excerpt":"문제 유니티로 게임을 개발하기 위해 스크립트를 짜고 있었다. 리스트에 들어있는 인스턴스와 다른 인스턴스를 교환(swap…","fields":{"slug":"/csharp/Csharp에서-데이터-swap하기/"},"frontmatter":{"date":"July 17, 2023","title":"Csharp에서 데이터 swap하기","tags":["csharp"]}},{"excerpt":"CTS C#의 모든 형식은 기본 형식에서 파생된 또는 상속된 형식이다. 모든 형식은 로부터 파생된다. 이렇게 기본 형식에서 파생되는 구조를 공용 형식 시스템(Common Type System)이라고 한다. 형식 CTS의 모든 형식은 Value…","fields":{"slug":"/csharp/Csharp의-형식/"},"frontmatter":{"date":"July 17, 2023","title":"Csharp의 형식","tags":["csharp"]}},{"excerpt":"의도 서로 관련성이 있거나 독립적인 여러 객체의 집합을 생성하기 위한 인터페이스를 제공한다. UML  사용자는 추상 팩토리를 통해 A와 B…","fields":{"slug":"/design-patterns/추상-팩토리-패턴/"},"frontmatter":{"date":"July 16, 2023","title":"추상 팩토리 패턴","tags":["design-pattern"]}},{"excerpt":"…","fields":{"slug":"/design-patterns/디자인패턴-용어-정리/"},"frontmatter":{"date":"July 13, 2023","title":"디자인 패턴 용어 정리","tags":["design-pattern"]}}]}},"pageContext":{"category":"Study"}},"staticQueryHashes":["1846574571","230163734","3589320610"],"slicesMap":{}}