{"componentChunkName":"component---src-templates-category-js","path":"/categories/study/디자인-패턴/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"allMarkdownRemark":{"nodes":[{"excerpt":"의도 객체 구조를 이루는 원소에 대해 수행할 연산을 표현한다. 연산을 적용할 원소의 클래스를 변경하지 않고도 새로운 연산을 정의할 수 있다. UML  방문자(Visitor) 인터페이스는 객체 즉, Element…","fields":{"slug":"/design-patterns/방문자-패턴/"},"frontmatter":{"date":"August 17, 2023","title":"방문자 패턴","tags":["design-pattern"]}},{"excerpt":"의도 알고리즘의 뼈대만 정의하고 각 단계에서 수행할 구체적 처리는 서브 클래스 쪽으로 미룬다. 서브 클래스에서 알고리즘의 각 단계를 재정의하여 구현한다. UML  AbstractClass…","fields":{"slug":"/design-patterns/템플릿-메서드-패턴/"},"frontmatter":{"date":"August 15, 2023","title":"템플릿 메서드 패턴","tags":["design-pattern"]}},{"excerpt":"의도 동일 계열의 알고리즘 군을 정의하고, 각 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도록 만든다. 알고리즘을 사용하는 클라이언트와 상관없이 독립적으로 변경할 수 있도록 한다. UML  알고리즘(Strategy…","fields":{"slug":"/design-patterns/전략-패턴/"},"frontmatter":{"date":"August 14, 2023","title":"전략 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체의 내부 상태에 따라 행동을 변경한다. 이 때 객체가 자신의 클래스를 변경하는 것처럼 보이게 된다. UML  객체(Context)는 구체적인 상태를 갖기 위해 어떤 상태(State) 추상 클래스를 상속한 객체를 참조한다. State…","fields":{"slug":"/design-patterns/상태-패턴/"},"frontmatter":{"date":"August 09, 2023","title":"상태 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체 사이에 일 대 다 관계를 정의하여 어떤 객체의 상태가 변했을 때 모든 객체가 자동으로 그 변화를 통지받아 갱신되도록 만든다. UML  Subject는 여러 Observer…","fields":{"slug":"/design-patterns/옵저버-패턴/"},"frontmatter":{"date":"August 08, 2023","title":"옵저버 패턴","tags":["design-pattern"]}},{"excerpt":"의도 캡슐화를 위배하지 않으면서 어떤 객체의 내부 상태를 잡아내고 실체화시켜두어 나중에 객체가 저장해둔 상태로 되돌아오도록 한다. UML  Originator…","fields":{"slug":"/design-patterns/메멘토-패턴/"},"frontmatter":{"date":"August 07, 2023","title":"메멘토 패턴","tags":["design-pattern"]}},{"excerpt":"의도 한 집합에 속해있는 객체의 상호작용을 캡슐화하는 객체를 정의한다. 객체들이 서로를 참조하지 않고 중재자 객체를 참조하도록 하여 과도한 결합을 줄인다. UML  상호작용을 할 객체(Colleague)들은 모두 mediator…","fields":{"slug":"/design-patterns/중재자-패턴/"},"frontmatter":{"date":"August 06, 2023","title":"중재자 패턴","tags":["design-pattern"]}},{"excerpt":"…","fields":{"slug":"/design-patterns/인터프리터-패턴/"},"frontmatter":{"date":"August 05, 2023","title":"인터프리터 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체의 내부 표현부를 노출하지 않으면서 집합에 속한 원소들을 순회하는 방법을 제공한다. 리스트 객체에 접근해서 새로운 내용을 삽입, 삭제 또는 순회하는 내용을 반복자 객체에 정의하여 집합 객체의 인터페이스를 확장시키지 않게 된다. UML…","fields":{"slug":"/design-patterns/반복자-패턴/"},"frontmatter":{"date":"August 02, 2023","title":"반복자 패턴","tags":["design-pattern"]}},{"excerpt":"의도 요청 자체를 캡슐화하는 것이다. 이를 통해 사용자를 서로 다른 요청으로 매개변수화하거나, 요청을 로깅 또는 대기시킬 수 있고, 되돌릴 수 있는 연산을 지원한다. UML  Receiver…","fields":{"slug":"/design-patterns/명령-패턴/"},"frontmatter":{"date":"July 31, 2023","title":"명령 패턴","tags":["design-pattern"]}},{"excerpt":"의도 메시지를 보내는 객체와 이를 받아 처리하는 객체들 간의 결합도를 낮춘다. 어떤 요청을 받았을 때 그 요청을 처리할 수 없다면 자신과 연결된 객체에게 전달하여 모든 객체가 그 요청을 처리할 수 있도록 설계한다. UML  Handler…","fields":{"slug":"/design-patterns/책임-연쇄-패턴/"},"frontmatter":{"date":"July 30, 2023","title":"책임 연쇄 패턴","tags":["design-pattern"]}},{"excerpt":"의도 다른 객체에 대한 접근을 제어하기 위한 대리자 또는 Placeholder 역할을 하는 객체를 두기 위해 쓴다. UML  RealSubject는 Subject 인터페이스를 상속한 서브 클래스다. 사용자는 Subject…","fields":{"slug":"/design-patterns/프록시-패턴/"},"frontmatter":{"date":"July 29, 2023","title":"프록시 패턴","tags":["design-pattern"]}},{"excerpt":"의도 공유를 통해 다수의 작은 객체들을 지원한다. 수많은 객체가 하나의 클래스에 대해 각각의 인스턴스를 갖게 하기보다 미리 생성해놓은 인스턴스의 참조자를 가지도록 만드는 것이다. UML  사용자(Client)는 팩토리(FlyweightFactory…","fields":{"slug":"/design-patterns/플라이웨이트-패턴/"},"frontmatter":{"date":"July 28, 2023","title":"플라이웨이트 패턴","tags":["design-pattern"]}},{"excerpt":"의도 한 서브 시스템 내의 인터페이스 집합에 대한 획일화된 하나의 인터페이스를 제공하는 패턴으로, 서브 시스템을 사용하기 쉽도록 상위 수준의 인터페이스를 정의한다. UML…","fields":{"slug":"/design-patterns/퍼사드-패턴/"},"frontmatter":{"date":"July 27, 2023","title":"퍼사드 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체에 동적으로 새로운 책임을 추가한다. 기능을 추가할 때 서브 클래스를 만드는 것보다 더 쉬운 방법을 제공한다. UML  컴포지트 패턴처럼 기초가 될 Component 추상 클래스를 정의한다. Component…","fields":{"slug":"/design-patterns/데코레이터-패턴/"},"frontmatter":{"date":"July 26, 2023","title":"데코레이터 패턴","tags":["design-pattern"]}},{"excerpt":"의도 부분과 전체의 계층을 표현하기 위해 객체들을 트리 구조로 구성한다. 사용자는 기본 객체와 복합 객체(컴포지트 객체)를 동일하게 다룰 수 있게 된다. UML  추상 클래스 Component를 정의한다. 추상 클래스 내에는 다른 Component…","fields":{"slug":"/design-patterns/컴포지트-패턴/"},"frontmatter":{"date":"July 25, 2023","title":"컴포지트 패턴","tags":["design-pattern"]}},{"excerpt":"의도 구체적인 구현을 가진 클래스에서 추상적 요소를 분리하여 다양성을 가질 수 있도록 설계한다. UML…","fields":{"slug":"/design-patterns/브릿지-패턴/"},"frontmatter":{"date":"July 24, 2023","title":"브릿지 패턴","tags":["design-pattern"]}},{"excerpt":"의도 클래스의 인터페이스를 사용자가 기대하는 인터페이스로 적응(Adapt)시킨다. 클래스 어댑터(상속을 통해 구현) UML  Target 클래스에 메서드를 정의하는데, 추상 클래스의 서브 클래스에서 Adaptee…","fields":{"slug":"/design-patterns/어댑터-패턴/"},"frontmatter":{"date":"July 23, 2023","title":"어댑터 패턴","tags":["design-pattern"]}},{"excerpt":"의도 오직 한 개의 클래스 인스턴스만을 갖도록 하고 그 인스턴스를 전역적으로 접근할 수 있게 한다. UML  싱글턴 클래스는 자기 자신을 으로 제공한다. 외부에서 싱글턴 클래스에 접근하기 위해서는 static…","fields":{"slug":"/design-patterns/싱글턴-패턴/"},"frontmatter":{"date":"July 22, 2023","title":"싱글턴 패턴","tags":["design-pattern"]}},{"excerpt":"의도 프로토타입이 되는 인스턴스를 사용하여 생성할 객체의 종류를 명시하고, 이렇게 만든 견본을 복사하여 새로운 객체를 생성한다. UML…","fields":{"slug":"/design-patterns/프로토타입-패턴/"},"frontmatter":{"date":"July 21, 2023","title":"프로토타입 패턴","tags":["design-pattern"]}},{"excerpt":"의도 객체를 생성하기 위해 인터페이스를 정의하지만, 어떤 클래스의 인스턴스를 생성할 지에 대한 결정은 서브 클래스가 내리도록 한다. UML…","fields":{"slug":"/design-patterns/팩토리-메서드-패턴/"},"frontmatter":{"date":"July 19, 2023","title":"팩토리 메서드 패턴","tags":["design-pattern"]}},{"excerpt":"의도 복잡한 객체를 생성하는 방법을 표현하는 방법을 정의한 클래스로부터 분리하여, 서로 다른 객체를 생성할 때 동일한 과정을 통해 생성하도록 한다. UML…","fields":{"slug":"/design-patterns/빌더-패턴/"},"frontmatter":{"date":"July 18, 2023","title":"빌더 패턴","tags":["design-pattern"]}},{"excerpt":"의도 서로 관련성이 있거나 독립적인 여러 객체의 집합을 생성하기 위한 인터페이스를 제공한다. UML  사용자는 추상 팩토리를 통해 A와 B…","fields":{"slug":"/design-patterns/추상-팩토리-패턴/"},"frontmatter":{"date":"July 16, 2023","title":"추상 팩토리 패턴","tags":["design-pattern"]}},{"excerpt":"…","fields":{"slug":"/design-patterns/디자인패턴-용어-정리/"},"frontmatter":{"date":"July 13, 2023","title":"디자인 패턴 용어 정리","tags":["design-pattern"]}}]}},"pageContext":{"category":"Study","subCategory":"디자인 패턴"}},"staticQueryHashes":["1846574571","230163734","3589320610"],"slicesMap":{}}