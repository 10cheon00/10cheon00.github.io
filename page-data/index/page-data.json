{"componentChunkName":"component---src-templates-pagination-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"allMarkdownRemark":{"nodes":[{"excerpt":"의도 동일 계열의 알고리즘 군을 정의하고, 각 알고리즘을 캡슐화하며, 이들을 상호교환이 가능하도록 만든다. 알고리즘을 사용하는 클라이언트와 상관없이 독립적으로 변경할 수 있도록 한다. UML  알고리즘(Strategy…","fields":{"slug":"/design-patterns/전략-패턴/"},"frontmatter":{"date":"August 14, 2023","title":"전략 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"암시적 형변환 암시적 형변환은 여러 상황에서 일어난다. 대표적으로 function member invocation…","fields":{"slug":"/others/Csharp의-형변환/"},"frontmatter":{"date":"August 10, 2023","title":"Csharp의 형변환","description":null,"tags":["csharp"]}},{"excerpt":"Boxing…","fields":{"slug":"/others/Boxing과-Unboxing/"},"frontmatter":{"date":"August 10, 2023","title":"Boxing과 Unboxing","description":null,"tags":["csharp"]}},{"excerpt":"의도 객체의 내부 상태에 따라 행동을 변경한다. 이 때 객체가 자신의 클래스를 변경하는 것처럼 보이게 된다. UML  객체(Context)는 구체적인 상태를 갖기 위해 어떤 상태(State) 추상 클래스를 상속한 객체를 참조한다. State…","fields":{"slug":"/design-patterns/상태-패턴/"},"frontmatter":{"date":"August 09, 2023","title":"상태 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 객체 사이에 일 대 다 관계를 정의하여 어떤 객체의 상태가 변했을 때 모든 객체가 자동으로 그 변화를 통지받아 갱신되도록 만든다. UML  Subject는 여러 Observer…","fields":{"slug":"/design-patterns/옵저버-패턴/"},"frontmatter":{"date":"August 08, 2023","title":"옵저버 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 캡슐화를 위배하지 않으면서 어떤 객체의 내부 상태를 잡아내고 실체화시켜두어 나중에 객체가 저장해둔 상태로 되돌아오도록 한다. UML  Originator…","fields":{"slug":"/design-patterns/메멘토-패턴/"},"frontmatter":{"date":"August 07, 2023","title":"메멘토 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"의도 한 집합에 속해있는 객체의 상호작용을 캡슐화하는 객체를 정의한다. 객체들이 서로를 참조하지 않고 중재자 객체를 참조하도록 하여 과도한 결합을 줄인다. UML  상호작용을 할 객체(Colleague)들은 모두 mediator…","fields":{"slug":"/design-patterns/중재자-패턴/"},"frontmatter":{"date":"August 06, 2023","title":"중재자 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"…","fields":{"slug":"/design-patterns/인터프리터-패턴/"},"frontmatter":{"date":"August 05, 2023","title":"인터프리터 패턴","description":null,"tags":["design-pattern"]}},{"excerpt":"동기 Gatsby로 블로그를 만들 때 Gatsby Starter Blog 테마를 적용했다. 매우 깔끔한 테마에 파일 구조도 단순하여 금방 글을 작성하여 배운 내용을 정리하고 있었다. 어느덧 게시글 수가 2…","fields":{"slug":"/posts/Gatsby-starter-blog테마에-pagination-추가하기/"},"frontmatter":{"date":"August 02, 2023","title":"Gatsby Starter Blog테마에 Pagination 추가하기","description":null,"tags":["gatsby","blog","react"]}},{"excerpt":"의도 객체의 내부 표현부를 노출하지 않으면서 집합에 속한 원소들을 순회하는 방법을 제공한다. 리스트 객체에 접근해서 새로운 내용을 삽입, 삭제 또는 순회하는 내용을 반복자 객체에 정의하여 집합 객체의 인터페이스를 확장시키지 않게 된다. UML…","fields":{"slug":"/design-patterns/반복자-패턴/"},"frontmatter":{"date":"August 02, 2023","title":"반복자 패턴","description":null,"tags":["design-pattern"]}}]}},"pageContext":{"limit":10,"skip":0,"currentPage":1,"numPagination":5,"paginationPageCount":4}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}