{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/네트워크-레이어-(1)/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"markdownRemark":{"id":"4c61388d-32ac-54df-a278-b033107ff45c","excerpt":"컴퓨터 네트워크 수업을 듣고 정리한 내용입니다. 데이터 영역 라우터 내부의 로직 라우터로 들어온 패킷이 어느 포트로 나가야할 지 결정 input port - 스위칭 구조 - output port Input Port link layer에서 전달된 datagram…","html":"<p>컴퓨터 네트워크 수업을 듣고 정리한 내용입니다.</p>\n<h1 id=\"데이터-영역\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%98%81%EC%97%AD\" aria-label=\"데이터 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>데이터 영역</h1>\n<ul>\n<li>라우터 내부의 로직</li>\n<li>라우터로 들어온 패킷이 어느 포트로 나가야할 지 결정</li>\n<li>input port - 스위칭 구조 - output port</li>\n</ul>\n<h2 id=\"input-port\" style=\"position:relative;\"><a href=\"#input-port\" aria-label=\"input port permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Input Port</h2>\n<p>link layer에서 전달된 datagram을 수신함.</p>\n<p>이 때 들어오는 속도가 라우터를 빠져나가는 속도보다 더 빠르면 데이터의 손실이 발생할 수 있음.</p>\n<p>이 문제를 해결하기 위해 queue를 활용하여 들어오는 datagram을 저장.</p>\n<h3 id=\"input-port-forwarding\" style=\"position:relative;\"><a href=\"#input-port-forwarding\" aria-label=\"input port forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Input Port Forwarding</h3>\n<p>input port로 들어온 datagram을 적절한 output port로 내보내는 작업.</p>\n<p>datagram의 ip header를 검사하여 forwarding한다.</p>\n<ul>\n<li>\n<p>destination-based forwarding</p>\n<p>ip destination의 범위를 지정하여 특정 범위 내에 해당하는 datagram은 지정된 port로 나가도록 forwarding하는 것</p>\n<p>범위가 중구난방이면 검사하는데 시간이 많이 걸림</p>\n</li>\n<li>\n<p>longest prefix matching</p>\n<p>ip destination의 패턴을 검사하여 가장 길게 매칭되는 prefix를 찾아 지정된 port로 나가도록 forwarding하는 것</p>\n<p>패턴을 검사하기만 하므로 (AND연산) 굉장히 빠르다</p>\n</li>\n</ul>\n<h2 id=\"switching-fabric\" style=\"position:relative;\"><a href=\"#switching-fabric\" aria-label=\"switching fabric permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Switching Fabric</h2>\n<p>input port로 들어온 packet을 output port로 내보낼 때 실제로 데이터를 스위칭하는 역할을 담당.</p>\n<p>N개의 패킷과 R개의 input port가 있다면 스위칭에 걸리는 이상적인 시간은 NR.</p>\n<ul>\n<li>\n<p>메모리</p>\n<p>컴퓨터의 메모리에 저장하여 스위칭하는 방법.</p>\n<p>그러나 컴퓨터의 메모리에 저장해야 하므로 메모리까지 연결된 버스를 이용해야한다.</p>\n<p>스위칭 속도가 컴퓨터의 메모리 대역폭에 제한받음.</p>\n</li>\n<li>\n<p>버스</p>\n<p>하나의 공용 버스를 통해 스위칭하는 방법.</p>\n<p>스위칭 속도가 버스의 대역폭에 제한받음.</p>\n<p>여러 패킷이 동시에 한 버스에 접근할 때 에러가 발생할 수 있음.</p>\n</li>\n<li>\n<p>Interconnection</p>\n<p>스위치를 사용하여 동시에 패킷을 스위칭함.</p>\n<p>datagram의 크기를 고정하여 속도를 향상할 수 있음. 이 때 길이가 긴 datagram은 쪼개어 스위칭해야함.</p>\n</li>\n</ul>\n<p>여러 개의 switching fabric을 사용하여 속도를 더 올릴 수 있다.</p>\n<h2 id=\"input-port-queuing\" style=\"position:relative;\"><a href=\"#input-port-queuing\" aria-label=\"input port queuing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Input Port Queuing</h2>\n<p>datagram이 input port로 들어오는 속도가 switching fabric으로 나가는 속도보다 더 빠를 경우 queue에 datagram이 쌓인다.</p>\n<p>queue가 꽉 차면 오버플로우에 의해 데이터가 손실된다.</p>\n<p>queue에 쌓인 데이터가 switching되지 않고 기다릴 경우 delay가 발생한다. (Head of the Line blocking)</p>\n<h2 id=\"output-port-queuing\" style=\"position:relative;\"><a href=\"#output-port-queuing\" aria-label=\"output port queuing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Output Port Queuing</h2>\n<p>input port와 비슷하게 switching되는 속도가 output port에서 나가는 속도보다 빠를 경우 output port에 datagram이 쌓인다.</p>\n<p>queue가 꽉차면 오버플로우에 의해 데이터가 손실된다. 어쩔 수 없이 데이터가 손실된다면 데이터를 손실시키는 전략 필요.</p>\n<p>버퍼가 꽉찼을 때 전달되는 패킷을 drop하거나, 패킷에 중요도를 부여하여 중요도가 낮은 패킷을 drop</p>\n<h3 id=\"queue-management\" style=\"position:relative;\"><a href=\"#queue-management\" aria-label=\"queue management permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Queue Management</h3>\n<ul>\n<li>\n<p>FIFO</p>\n<p>패킷이 도착한 순서대로 queue에 삽입한다. 데이터가 송신될 수 있으면 큐에서 패킷을 꺼내 송신한다.</p>\n</li>\n<li>\n<p>Priority</p>\n<p>우선순위에 따라 두 개의 큐를 사용한다. 우선순위가 높은 큐에서 더 빈번하게 패킷을 꺼내 송신한다.\n각 패킷의 우선순위는 header field를 이용해 판단한다.</p>\n</li>\n<li>\n<p>Round Robin</p>\n<p>여러 큐에 패킷을 담되, 지정된 시퀀스에 따라 저장 및 송신할 큐를 바꾼다.</p>\n</li>\n<li>\n<p>WFQ</p>\n<p>Round Robin처럼 동작하되, 큐에 가중치를 부여하여 시퀀스를 결정한다.\n가중치가 A=1, B=3, C=5인 시스템이라면 CCCCCBBBACCCCCBBBA... 형태로 바뀌어 동작한다.</p>\n</li>\n</ul>\n<h2 id=\"ip-datagram-format\" style=\"position:relative;\"><a href=\"#ip-datagram-format\" aria-label=\"ip datagram format permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>IP Datagram Format</h2>\n<ul>\n<li>\n<p>Version</p>\n<p>Internet Protocol의 버전</p>\n<p>보통 IPv4 또는 IPv6</p>\n</li>\n<li>\n<p>Header Length</p>\n<p>datagram의 header의 크기</p>\n<p>크기가 4비트인데, 1비트가 4바이트인 것으로 생각한다.</p>\n<p>ex) 0101 -> 5, 5*4bytes = 20bytes 실제 헤더의 길이 = 20바이트</p>\n</li>\n<li>\n<p>Type of Service</p>\n<p>diffserv또는 ECN?</p>\n<p>패킷의 우선순위 또는 속도를 지정? 그외의 용도?</p>\n</li>\n<li>\n<p>Total Length</p>\n<p>Header와 payload까지 합한 datagram의 총 길이</p>\n</li>\n<li>\n<p>Identification</p>\n<p>쪼갠 datagram을 결합하기 위해 각 datagram마다 부여한 고유의 번호</p>\n</li>\n<li>\n<p>Flags</p>\n<p>쪼갠 datagram중 마지막 파편을 의미</p>\n</li>\n<li>\n<p>Fragment Offset</p>\n<p>쪼갠 datagram의 순서</p>\n</li>\n<li>\n<p>Time to live</p>\n<p>네트워크에서 datagram의 생명값?</p>\n<p>datagram이 라우터에서 라우터로 이동할 때마다 1씩 감소</p>\n</li>\n<li>\n<p>Protocol</p>\n<p>IP를 사용한 상위 레이어의 프로토콜</p>\n</li>\n<li>\n<p>Header checksum</p>\n</li>\n<li>\n<p>Source IP Address</p>\n</li>\n<li>\n<p>Destination IP Address</p>\n</li>\n</ul>\n<p>Total Length 필드가 16비트이므로 패킷의 최대 길이는 65535바이트. 그러나 일반적으로 1500바이트라고 함</p>\n<h2 id=\"subnet\" style=\"position:relative;\"><a href=\"#subnet\" aria-label=\"subnet permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Subnet</h2>\n<p>라우터간을 거치지 않고 접근할 수 있는 인터페이스들의 집합</p>\n<p>a.b.c.d/n 으로 표현될 때 IP주소의 32비트에서 호스트 영역을 나타내는 하위 n비트를 제외한 나머지 영역을 서브넷 영역이라고 함.</p>\n<p>서브넷 영역의 길이는 자유롭게 설정될 수 있음.</p>\n<h2 id=\"dhcp\" style=\"position:relative;\"><a href=\"#dhcp\" aria-label=\"dhcp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>DHCP</h2>\n<p>새로운 네트워크에 접속했을 때 DHCP 서버로부터 서브넷 내에서 사용할 IP주소를 동적으로 할당해주는 것</p>\n<h3 id=\"dhcp-sequence\" style=\"position:relative;\"><a href=\"#dhcp-sequence\" aria-label=\"dhcp sequence permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>DHCP Sequence</h3>\n<ul>\n<li>\n<p>DHCP discover</p>\n<p>새로운 네트워크에 접속한 클라이언트는 서브넷에 discover 메세지를 브로드캐스트.</p>\n</li>\n<li>\n<p>DHCP offer</p>\n<p>discover 메세지를 수신한 DHCP 서버는 해당 클라이언트에게 임의로 IP 주소를 할당한 다음 offer 메세지를 전송</p>\n</li>\n<li>\n<p>DHCP request</p>\n<p>IP 주소를 제공해준 DHCP 서버에게 이 IP주소를 사용하겠다고 브로드캐스트</p>\n</li>\n<li>\n<p>DHCP acknowledge\n클라이언트가 IP 주소를 사용하겠다는 메세지를 받았음을 확인한다는 메세지를 전송</p>\n</li>\n</ul>\n<p>DHCP 서버는 클라이언트에게 IP주소 뿐만 아니라 서브넷, 라우터의 주소, DNS 서버 등을 전송</p>\n<h2 id=\"isp\" style=\"position:relative;\"><a href=\"#isp\" aria-label=\"isp permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>ISP</h2>\n<p>서브넷을 할당받으려면 ISP에게 요청해야함.</p>\n<p>ISP는 IP 주소를 영역 단위로 쪼개어 각 가입자에게 제공함.</p>\n<h2 id=\"nat\" style=\"position:relative;\"><a href=\"#nat\" aria-label=\"nat permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>NAT</h2>\n<p>외부와는 독립적인 로컬 네트워크를 구성하는 방법</p>\n<ul>\n<li>외부에 호스트의 IP주소가 노출되지 않음</li>\n<li>라우터의 주소가 바뀌어도 로컬 네트워크의 주소는 바뀌지 않음</li>\n<li>호스트의 주소를 바꿀 때 외부에 알리지 않아도 됨</li>\n</ul>\n<h3 id=\"nat-forwarding-table\" style=\"position:relative;\"><a href=\"#nat-forwarding-table\" aria-label=\"nat forwarding table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>NAT Forwarding Table</h3>\n<p>외부 주소를 나타내는 WAN과 로컬 호스트들의 주소를 나타내는 LAN으로 구성.</p>\n<p>내부에서 외부로 나가는 datagram의 경우 source addr을 라우터의 ip로 변환.</p>\n<p>외부에서 내부로 들어오는 datagram의 경우 dest addr을 호스트의 ip로 변환.</p>\n<p>단, 외부에서 내부로 들어올 때 호스트를 구분하기 위해 호스트별로 다른 포트를 사용한다.</p>\n<h2 id=\"ipv6-datagram-format\" style=\"position:relative;\"><a href=\"#ipv6-datagram-format\" aria-label=\"ipv6 datagram format permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>IPv6 Datagram format</h2>\n<ul>\n<li>\n<p>Version</p>\n<p>IP 버전</p>\n</li>\n<li>\n<p>Priority</p>\n<p>ToS와 유사</p>\n</li>\n<li>\n<p>Flow Label</p>\n<p>각각의 패킷 흐름을 구별하는 용도</p>\n</li>\n<li>\n<p>Payload length</p>\n</li>\n<li>\n<p>Next Header</p>\n<p>확장 헤더 다음에 올 헤더의 종류를 의미</p>\n</li>\n<li>\n<p>Hop Limit</p>\n</li>\n<li>\n<p>Source IP Address</p>\n</li>\n<li>\n<p>Destination IP Address</p>\n</li>\n</ul>\n<p>IPv4와 다르게 헤더 체크섬, flag와 fragment offset, option 필드가 없음</p>\n<p>만약 IPv4를 불가피하게 써야 한다면, IPv4의 payload에 IPv6 패킷을 담아 전송한다.</p>\n<h2 id=\"flow-table\" style=\"position:relative;\"><a href=\"#flow-table\" aria-label=\"flow table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Flow Table</h2>\n<p>각 패킷은 flow를 갖는데, flow는 여러 헤더들에 의해 규정된다.</p>\n<p>특정 패턴에 부합하는 패킷이라면 지정된 action을 수행한다.</p>\n<p>기존에 있었던 방식으로는 destination based forwarding이 있다.</p>\n<h2 id=\"open-flow-table\" style=\"position:relative;\"><a href=\"#open-flow-table\" aria-label=\"open flow table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Open Flow Table</h2>\n<p>Match에는 전달되는 포트, link layer의 헤더, network layer의 헤더 그리고 transport layer의 헤더가 사용됨.</p>\n<p>Action에는 Forward, drop, modify, encapsulate?가 있음.</p>\n<p>Match+action 구조는 라우터 뿐만 아니라 스위치, 방화벽, NAT 등의 여러 인터페이스에서 사용가능.</p>\n<p>이러한 Open Flow Table을 구성하는 것은 SDN이 담당</p>\n<h2 id=\"middlebox\" style=\"position:relative;\"><a href=\"#middlebox\" aria-label=\"middlebox permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>Middlebox</h2>\n<p>source와 destination 간에 패킷 포워딩 외의 다른 작업들도 수행할 수 있는 기기들, NAT, 방화벽, 로드밸런서 등.</p>\n<p>하드웨어를 지칭하는 단어였으나 소프트웨어로 컨트롤 가능하게 변했음.</p>","frontmatter":{"title":"네트워크 레이어 (1)","date":"October 06, 2023","description":null,"tags":["computer-network"]},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%98%81%EC%97%AD\">데이터 영역</a></p>\n<ul>\n<li>\n<p><a href=\"#input-port\">Input Port</a></p>\n<ul>\n<li><a href=\"#input-port-forwarding\">Input Port Forwarding</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#switching-fabric\">Switching Fabric</a></p>\n</li>\n<li>\n<p><a href=\"#input-port-queuing\">Input Port Queuing</a></p>\n</li>\n<li>\n<p><a href=\"#output-port-queuing\">Output Port Queuing</a></p>\n<ul>\n<li><a href=\"#queue-management\">Queue Management</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ip-datagram-format\">IP Datagram Format</a></p>\n</li>\n<li>\n<p><a href=\"#subnet\">Subnet</a></p>\n</li>\n<li>\n<p><a href=\"#dhcp\">DHCP</a></p>\n<ul>\n<li><a href=\"#dhcp-sequence\">DHCP Sequence</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#isp\">ISP</a></p>\n</li>\n<li>\n<p><a href=\"#nat\">NAT</a></p>\n<ul>\n<li><a href=\"#nat-forwarding-table\">NAT Forwarding Table</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ipv6-datagram-format\">IPv6 Datagram format</a></p>\n</li>\n<li>\n<p><a href=\"#flow-table\">Flow Table</a></p>\n</li>\n<li>\n<p><a href=\"#open-flow-table\">Open Flow Table</a></p>\n</li>\n<li>\n<p><a href=\"#middlebox\">Middlebox</a></p>\n</li>\n</ul>\n</li>\n</ul>"},"previous":{"fields":{"slug":"/posts/Gatsby-목차-사이드바-만들기/"},"frontmatter":{"title":"Gatsby 목차 사이드바 만들기"}},"next":{"fields":{"slug":"/posts/네트워크-레이어-(2)/"},"frontmatter":{"title":"네트워크 레이어 (2)"}}},"pageContext":{"id":"4c61388d-32ac-54df-a278-b033107ff45c","previousPostId":"37fe296b-6720-5d06-9b54-4e2d9b6f98f8","nextPostId":"29451c93-40f9-575d-b863-5acac6316b63"}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}