{"componentChunkName":"component---src-templates-blog-post-js","path":"/csharp/Csharp의-키워드/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"markdownRemark":{"id":"c68ca5f6-215e-5a6b-b064-467c93e8ab06","excerpt":"몇 가지 처음 보는 키워드들을 정리해보았다. as 영어사전에서 as는 '~처럼', '~때문에', '~로서' 등의 의미가 있지만 C…","html":"<p>몇 가지 처음 보는 키워드들을 정리해보았다.</p>\n<h1 id=\"as\" style=\"position:relative;\"><a href=\"#as\" aria-label=\"as permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>as</h1>\n<p>영어사전에서 as는 '~처럼', '~때문에', '~로서' 등의 의미가 있지만 C#에서는 '~처럼'의 개념을 사용하여 타입을 명시적으로 변환한다.</p>\n<p><code class=\"language-text\">E as T</code>라는 식이 실행되면 인스턴스 <code class=\"language-text\">E</code>는 타입 <code class=\"language-text\">T</code>'처럼' 변환한다.</p>\n<p>여기서 중요한 점은 참조, <code class=\"language-text\">nullable</code>, boxing과 unboxing 변환만 가능하다. int를 float으로 바꾸는 것처럼 값 형식에 대해서는 사용할 수는 없다.</p>\n<h1 id=\"base\" style=\"position:relative;\"><a href=\"#base\" aria-label=\"base permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>base</h1>\n<p>서브 클래스에서 부모 클래스의 멤버에 엑세스할 때 사용한다.</p>\n<p>C++에서는 부모 클래스의 멤버를 사용하려면 <code class=\"language-text\">Parent::x</code>처럼 직접 부모 클래스명을 써야 했지만 C#에서는 <code class=\"language-text\">base</code>연산자로 접근이 가능하다.</p>\n<p>특히 중요한 것은 생성자에서 부모 클래스의 생성자를 호출할 때다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Parent</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>C++에서는 부모 생성자를 호출할 때 직접 부모 클래스명을 써야 했지만 여기서도 <code class=\"language-text\">base</code>연산자를 통해 부모 클래스의 생성자를 호출한다.</p>\n<h1 id=\"checked--unchecked\" style=\"position:relative;\"><a href=\"#checked--unchecked\" aria-label=\"checked  unchecked permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>checked / unchecked</h1>\n<p><a href=\"/csharp/Csharp%EC%9D%98-%ED%98%95%EB%B3%80%ED%99%98\">Csharp의 형변환</a> 게시글에서 <code class=\"language-text\">checked</code>와 <code class=\"language-text\">unchecked</code>가 등장한다.</p>\n<p>정수 계열 연산 및 변환 시기에 일어나는 오버플로우를 검사하는 컨텍스트를 지정한다.</p>\n<p><code class=\"language-text\">checked</code>일 때는 <code class=\"language-text\">System.OverflowException</code>이 <code class=\"language-text\">throw</code>되고, 상수 식에서는 컴파일 단계에서 에러가 일어난다.</p>\n<p><code class=\"language-text\">unchecked</code>일 때는 형식에 맞지 않는 상위 비트를 삭제한다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span>MaxValue<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unchecked</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output : -2147483646</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">checked</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// throw Arithmetic operation resulted in an overflow.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본적으로는 <code class=\"language-text\">unchecked</code> 컨텍스트에서 실행된다. 그러나 상수 식은 <code class=\"language-text\">checked</code> 컨텍스트에서 실행된다.</p>\n<h1 id=\"decimal\" style=\"position:relative;\"><a href=\"#decimal\" aria-label=\"decimal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>decimal</h1>\n<p><code class=\"language-text\">double</code>은 8바이트인 반면 <code class=\"language-text\">decimal</code>은 16바이트다. <code class=\"language-text\">double</code>은 부동 소수점 형식이지만, <code class=\"language-text\">decimal</code>은 십진 부동 소수점 형식이다. 부동 소수점 형식의 경우 0.1같은 값을 저장하면 실제로는 약간의 오차가 있지만 십진 부동소수점 형식의 경우 정확하게 0.1을 저장한다.</p>\n<p>이렇게 정확한 실수값을 저장해야한다면 <code class=\"language-text\">decimal</code>을 사용하는 것이 좋다.</p>\n<h1 id=\"delegate\" style=\"position:relative;\"><a href=\"#delegate\" aria-label=\"delegate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>delegate</h1>\n<p>메서드나 람다 식을 인스턴스화 한다. 인스턴스화 된 <code class=\"language-text\">delegate</code>를 호출하면 매개 변수가 인스턴스에게 전달되어 실행된다. 함수형 프로그래밍에서 콜백을 사용하는 것처럼 C#에서도 <code class=\"language-text\">delegate</code>를 통해 인스턴스화된 메서드를 인자로 받아 콜백함수처럼 실행할 수 있다.</p>\n<h1 id=\"foreach\" style=\"position:relative;\"><a href=\"#foreach\" aria-label=\"foreach permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>foreach</h1>\n<p>js에서 배열을 순회하기 위해 <code class=\"language-text\">forEach()</code>를 썼었던 것처럼, C#에서도 인덱스를 사용하지 않고 순회할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> item <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">item</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output : 1 2 3 4 5</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>대신에 <code class=\"language-text\">foreach</code>문을 사용하면서 인덱스를 얻으려면 다소 복잡한 방법을 사용해야한다.</p>\n<h1 id=\"internal\" style=\"position:relative;\"><a href=\"#internal\" aria-label=\"internal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>internal</h1>\n<p><code class=\"language-text\">public</code>처럼 엑세스 한정자의 일종이다. 하지만 같은 어셈블리 내에서만 접근이 가능하고 다른 어셈블리에서는 접근이 제한된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// A.cs</span>\n<span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// B.cs</span>\n<span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// CS0122 error ocurred</span></code></pre></div>\n<p>A.cs와 B.cs는 다른 어셈블리로 나뉜다. 따라서 B.cs 내에서 클래스 A에 접근하려고 할 때 에러가 일어나게 된다.</p>","frontmatter":{"title":"Csharp의 키워드","date":"August 25, 2023","description":null,"tags":["csharp"]},"tableOfContents":"<ul>\n<li><a href=\"#as\">as</a></li>\n<li><a href=\"#base\">base</a></li>\n<li><a href=\"#checked--unchecked\">checked / unchecked</a></li>\n<li><a href=\"#decimal\">decimal</a></li>\n<li><a href=\"#delegate\">delegate</a></li>\n<li><a href=\"#foreach\">foreach</a></li>\n<li><a href=\"#internal\">internal</a></li>\n</ul>"},"previous":{"fields":{"slug":"/csharp/record/"},"frontmatter":{"title":"record","date":"August 23, 2023"}},"next":{"fields":{"slug":"/posts/Gatsby-theme-toggler-만들기/"},"frontmatter":{"title":"Gatsby Theme Toggler 만들기","date":"September 08, 2023"}}},"pageContext":{"id":"c68ca5f6-215e-5a6b-b064-467c93e8ab06","previousPostId":"66b1f14f-6526-5b38-9a65-946be226f7d2","nextPostId":"769a3f61-9512-50a7-b6c8-da5f504470d5"}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}