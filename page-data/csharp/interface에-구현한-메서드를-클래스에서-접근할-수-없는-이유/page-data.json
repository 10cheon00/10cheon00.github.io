{"componentChunkName":"component---src-templates-blog-post-js","path":"/csharp/interface에-구현한-메서드를-클래스에서-접근할-수-없는-이유/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"markdownRemark":{"id":"9075049d-c744-5dcc-be8e-f784473a7c28","excerpt":"동기 인터페이스에 기본 메서드를 구현한 다음 그 인터페이스를 구현하는 클래스에서 기본 메서드를 호출하려고 하니 에러가 생겼다. 에러 메시지는 이렇다. /tmp/C2ywkFh53T.cs(27,11): error CS1061: 'HelloWorld.B' does not contain a…","html":"<h1 id=\"동기\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0\" aria-label=\"동기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>동기</h1>\n<p>인터페이스에 기본 메서드를 구현한 다음 그 인터페이스를 구현하는 클래스에서 기본 메서드를 호출하려고 하니 에러가 생겼다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IA</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IA</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error CS1061</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>에러 메시지는 이렇다.</p>\n<blockquote>\n<p>/tmp/C2ywkFh53T.cs(27,11): error CS1061: 'HelloWorld.B' does not contain a definition for 'Foo' and no accessible extension method 'Foo' accepting a first argument of type 'HelloWorld.B' could be found (are you missing a using directive or an assembly reference?)</p>\n</blockquote>\n<p>해석하자면, 클래스 <code class=\"language-text\">B</code>에는 <code class=\"language-text\">Foo</code>메서드에 대한 정의가 없고, 클래스 <code class=\"language-text\">B</code> 타입의 인수를 사용하는 확장 메서드가 없다는 말이다. 후자는 확장명 메서드를 의미하는데 인터페이스와는 관계없는 내용이다.</p>\n<p>어쨌든 클래스 <code class=\"language-text\">B</code>의 인스턴스 <code class=\"language-text\">b</code>는 <code class=\"language-text\">Foo</code>메서드에 대한 정의가 없다는 것이다. 여기까지만 해도 인터페이스를 구현했고, 인터페이스에 정의된 모든 메서드는 <code class=\"language-text\">public</code>이니까 클래스에서도 접근이 될거라 생각했다. 그런데 에러를 얻으니 당황스러웠다.</p>\n<h1 id=\"이유\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%9C%A0\" aria-label=\"이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>이유</h1>\n<p>이 문제는 인스턴스를 <strong>클래스로 접근하지 않고 인터페이스로 접근하면 해결된다</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">IA</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    b<span class=\"token punctuation\">.</span><span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 인터페이스로의 접근을 강제함으로써 클래스가 아닌 인터페이스를 사용하게 되므로 특정 클래스에 의존하지 않게 되는 효과를 볼 수 있다.</p>\n<p><strong><a href=\"https://stackoverflow.com/a/3034603\">🔗 Explicit interface implementation | Stack Overflow</a></strong></p>\n<p>하지만 왜 클래스로 접근했을 때에는 메서드를 호출할 수 없었을까?</p>\n<blockquote>\n<p>An explicit interface implementation doesn't have an access modifier since it isn't accessible as a member of the type it's defined in. Instead, it's only accessible when called through an instance of the interface.</p>\n<p><strong><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation\">🔗 Explicit interface implementation | Microsoft Learn </a></strong></p>\n</blockquote>\n<p>공식 문서에 따르면 명시적 인터페이스 메서드는 <em><strong>접근 제한자를 가지지 않고 오직 인스턴스를 인터페이스로 접근했을 때에만 사용가능하다</strong></em>고 되어있다.</p>\n<p>접근 제한자를 가지지 않고 인터페이스로만 접근해야하기 때문에 클래스로는 그 메서드를 호출할 수 없던 것이다.</p>\n<p>따라서 명시적 인터페이스 메서드를 호출하기 위해서는 타입 캐스팅이 꼭 필요하다.</p>\n<h1 id=\"귀찮은-캐스팅\" style=\"position:relative;\"><a href=\"#%EA%B7%80%EC%B0%AE%EC%9D%80-%EC%BA%90%EC%8A%A4%ED%8C%85\" aria-label=\"귀찮은 캐스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>귀찮은 캐스팅</h1>\n<p>하지만 캐스팅을 빈번하게 해야하는 상황이라면 클래스 인스턴스를 인터페이스로 참조하는 변수를 만들어야 한다.</p>\n<p>변수가 하나 더 생기기 때문에 조금 마음에 안든다면 아래처럼 내부적으로 캐스팅하는 메서드를 두어 관리할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IA</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// explicit interface method.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IA</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IA</span> _castToIA <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IA</span> CastToIA\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _castToIA<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span>CastToIA<span class=\"token punctuation\">.</span><span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong><a href=\"https://stackoverflow.com/a/1869420\">🔗 How to call explicit interface implementation methods internally without explicit casting?</a></strong></p>","frontmatter":{"title":"interface에 구현한 메서드를 클래스에서 접근할 수 없는 이유","date":"August 22, 2023","description":null,"tags":["csharp"]},"tableOfContents":"<ul>\n<li><a href=\"#%EB%8F%99%EA%B8%B0\">동기</a></li>\n<li><a href=\"#%EC%9D%B4%EC%9C%A0\">이유</a></li>\n<li><a href=\"#%EA%B7%80%EC%B0%AE%EC%9D%80-%EC%BA%90%EC%8A%A4%ED%8C%85\">귀찮은 캐스팅</a></li>\n</ul>"},"previous":{"fields":{"slug":"/csharp/Array와-List/"},"frontmatter":{"title":"Array와 List","date":"August 21, 2023"}},"next":{"fields":{"slug":"/csharp/record/"},"frontmatter":{"title":"record","date":"August 23, 2023"}}},"pageContext":{"id":"9075049d-c744-5dcc-be8e-f784473a7c28","previousPostId":"ad9b4a5f-9cfd-582f-85ac-b7558bc19203","nextPostId":"66b1f14f-6526-5b38-9a65-946be226f7d2"}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}