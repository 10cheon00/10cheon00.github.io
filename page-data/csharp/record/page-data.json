{"componentChunkName":"component---src-templates-blog-post-js","path":"/csharp/record/","result":{"data":{"site":{"siteMetadata":{"title":"10cheon00의 Archive"}},"markdownRemark":{"id":"66b1f14f-6526-5b38-9a65-946be226f7d2","excerpt":"record 는 주로 변하지 않는, immutable한 데이터를 다루기 위해 도입되었다. C#9부터 추가된 키워드인 새로운 참조 형식이다. C#1…","html":"<h1 id=\"record\" style=\"position:relative;\"><a href=\"#record\" aria-label=\"record permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>record</h1>\n<p><code class=\"language-text\">record</code>는 주로 변하지 않는, immutable한 데이터를 다루기 위해 도입되었다.</p>\n<p>C#9부터 추가된 키워드인 새로운 참조 형식이다. C#10에서는 이 <code class=\"language-text\">record</code>를 값 형태로 다루기 위해 레코드 구조체가 추가되었다고 한다. 이는 참조 기반이 아닌 값을 기반으로 한다는 점에서 클래스와 다르다고 한다.</p>\n<p><code class=\"language-text\">record</code> 또는 <code class=\"language-text\">record class</code>로 선언하면 참조 형식으로, <code class=\"language-text\">record struct</code>로 선언하면 값 형식으로 다룰 수 있다.</p>\n<h1 id=\"사용방법\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>사용방법</h1>\n<p>두 가지 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Coord</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> y<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Coord</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> x <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> y <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">public</span> required <span class=\"token return-type class-name\"><span class=\"token keyword\">double</span></span> z <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">init</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>전자의 경우 primary constructor를 사용하여 <code class=\"language-text\">record</code>를 정의하는 방법이다. 정의된 각 파라미터마다 컴파일러가 자동으로 public형태의 변수를 생성한 후 파라미터에 전해진 값이 저장된다.</p>\n<p><code class=\"language-text\">record</code>, <code class=\"language-text\">readonly record struct</code>로 선언한다면 인스턴스를 생성한 이후로는 값을 수정할 수 없고, <code class=\"language-text\">record struct</code>로 선언하면 인스턴스를 생성한 이후에도 값을 수정할 수 있다.</p>\n<h1 id=\"동일성-판단\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9D%BC%EC%84%B1-%ED%8C%90%EB%8B%A8\" aria-label=\"동일성 판단 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>동일성 판단</h1>\n<p><code class=\"language-text\">class</code>는 두 변수가 같은 인스턴스를 참조하고 있을 때 동일하다.</p>\n<p><code class=\"language-text\">struct</code>는 두 변수가 같은 타입이고 내부에 저장된 값이 모두 같을 경우 동일하다.</p>\n<p><code class=\"language-text\">record</code>는 <code class=\"language-text\">struct</code>와 동일하게 두 변수가 같은 타입이고 내부에 저장된 값이 모두 같을 경우 동일하다.</p>\n<p>따라서 사용자가 기본 제공되는 비교 연산자를 재정의하지 않는 이상, <code class=\"language-text\">record</code>형 변수의 비교는 값이 모두 동일한지 검사하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> FirstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> LastName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> PhoneNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> phoneNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nancy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Davolio\"</span><span class=\"token punctuation\">,</span> phoneNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nancy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Davolio\"</span><span class=\"token punctuation\">,</span> phoneNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person1 <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: True</span>\n\n    person1<span class=\"token punctuation\">.</span>PhoneNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"555-1234\"</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person1 <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: True</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">,</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: False</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>공식 문서에서 제공하는 예시에는 두 개의 레코드를 생성한 후 비교하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> phoneNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nancy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Davolio\"</span><span class=\"token punctuation\">,</span> phoneNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nancy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Davolio\"</span><span class=\"token punctuation\">,</span> phoneNumbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person1 <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: True</span></code></pre></div>\n<p>이 시점에서는 <code class=\"language-text\">person1</code>과 <code class=\"language-text\">person2</code>에 저장된 값은 모두 동일하다. <code class=\"language-text\">PhoneNumbers</code>에 저장된 값은 모두 같은 <code class=\"language-text\">phoneNumbers</code>인스턴스를 가리키고 있기 때문에 동일하다고 판단한다. (string은 참조 형식이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">person1<span class=\"token punctuation\">.</span>PhoneNumbers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"555-1234\"</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person1 <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: True</span>\n\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">,</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: False</span></code></pre></div>\n<p>여기서 person1의 PhoneNumbers를 변경하여도 phoneNumbers의 값을 변경하게 되므로 두 <code class=\"language-text\">record</code> 인스턴스는 동일하다.</p>\n<p>하지만 레퍼런스 형태로 비교하게 된다면 <code class=\"language-text\">class</code>형태의 두 변수를 비교하는 것처럼 같은 인스턴스를 가리키는지 비교하는 것이므로 동일하지 않다.</p>\n<h1 id=\"비파괴적-수정nondestructive-mutation\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8C%8C%EA%B4%B4%EC%A0%81-%EC%88%98%EC%A0%95nondestructive-mutation\" aria-label=\"비파괴적 수정nondestructive mutation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>비파괴적 수정(Nondestructive mutation)</h1>\n<p>immutable한 <code class=\"language-text\">record</code>를 정의 후 생성하였다 하더라도 수정이 필요한 경우가 있을 때에는 <code class=\"language-text\">with</code> 키워드를 사용하여 수정할 수 있다.</p>\n<p>사실 수정이 아니라 <strong>새로운 인스턴스</strong>를 생성하여 대입한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nancy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Davolio\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> PhoneNumbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: Person { FirstName = Nancy, LastName = Davolio, PhoneNumbers = System.String[] }</span>\n\n<span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> person1 <span class=\"token keyword\">with</span> <span class=\"token punctuation\">{</span> FirstName <span class=\"token operator\">=</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// output: Person { FirstName = John, LastName = Davolio, PhoneNumbers = System.String[] }</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>person1 <span class=\"token operator\">==</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// output: False</span></code></pre></div>\n<p>생성한 <code class=\"language-text\">person1</code>인스턴스를 기반으로 <code class=\"language-text\">with</code>키워드를 사용하여 새로운 인스턴스를 생성하여 <code class=\"language-text\">person2</code>에 할당한다.</p>\n<p>이렇게 한 후 <code class=\"language-text\">person1</code>과 <code class=\"language-text\">person2</code>를 비교하면 두 인스턴스가 다른 값을 갖고 있기 때문에 같지 않다고 한다.</p>\n<p><code class=\"language-text\">with</code>키워드를 사용하여 복제하는 경우, <strong>얕은 복사</strong>를 통해 복제하는 것이기 때문에 참조 형식의 변수일 경우, 복제 후에는 같은 인스턴스를 가리키게 된다.</p>\n<h1 id=\"상속\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D\" aria-label=\"상속 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" width=\"16\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\"><path fill-rule=\"evenodd\" d=\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\"></path></svg></a>상속</h1>\n<p>상속은 <code class=\"language-text\">record class</code>로 선언하였을 때에만 가능하다.</p>\n<p><code class=\"language-text\">record</code>간 상속이 가능하지만 <code class=\"language-text\">record</code>와 <code class=\"language-text\">class</code>간 상속은 불가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> FirstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> LastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">record</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> FirstName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> LastName<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Grade<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Person</span><span class=\"token record-arguments\"><span class=\"token punctuation\">(</span>FirstName<span class=\"token punctuation\">,</span> LastName<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Person</span> teacher <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nancy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Davolio\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>teacher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// output: Teacher { FirstName = Nancy, LastName = Davolio, Grade = 3 }</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스를 상속할 때처럼 <code class=\"language-text\">record</code>간 상속을 정의하면 된다.</p>\n<p><strong><a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/record\">🔗 Records | Microsoft Learn</a></strong></p>","frontmatter":{"title":"record","date":"August 23, 2023","description":null,"tags":["csharp"]}},"previous":{"fields":{"slug":"/csharp/interface에-구현한-메서드를-클래스에서-접근할-수-없는-이유/"},"frontmatter":{"title":"interface에 구현한 메서드를 클래스에서 접근할 수 없는 이유"}},"next":null},"pageContext":{"id":"66b1f14f-6526-5b38-9a65-946be226f7d2","previousPostId":"9075049d-c744-5dcc-be8e-f784473a7c28","nextPostId":null}},"staticQueryHashes":["230163734","3589320610"],"slicesMap":{}}