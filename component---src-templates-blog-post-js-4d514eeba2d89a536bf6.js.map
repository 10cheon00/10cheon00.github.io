{"version":3,"file":"component---src-templates-blog-post-js-4d514eeba2d89a536bf6.js","mappings":"2RAmCA,MAjCgB,YACd,WAAYA,GAAQ,IAAD,EAIiB,OAHlC,cAAMA,IAAM,MAEPC,WAAaC,EAAAA,YAClB,EAAKC,MAAQ,CAAEC,OAAQ,WAAW,CACpC,EANc,YAMb,kBAwBA,OAxBA,EACDC,kBAAA,WACE,MAAMC,EAAWC,SAASC,cAAc,UACxCF,EAASG,OAAS,IAAMC,KAAKC,SAAS,CAAEP,OAAQ,YAChDE,EAASM,QAAU,IAAMF,KAAKC,SAAS,CAAEP,OAAQ,WACjDE,EAASO,OAAQ,EACjBP,EAASQ,IAAM,gCACfR,EAASS,aAAa,OAAQ,iCAC9BT,EAASS,aAAa,aAAc,SACpCT,EAASS,aAAa,QAAS,gBAC/BT,EAASS,aAAa,cAAe,aACrCL,KAAKT,WAAWe,QAAQC,YAAYX,EACtC,EAAC,EAEDY,OAAA,WACE,MAAM,OAAEd,GAAWM,KAAKP,MAExB,OACE,uBAAKgB,UAAU,oBACD,WAAXf,GAAuB,2BAAK,4BACjB,YAAXA,GAAwB,2BAAK,qBAC9B,uBAAKgB,IAAKV,KAAKT,aAGrB,EAAC,EA9Ba,CAASC,EAAAA,W,UCSzB,MAuEamB,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFC,MAAOD,EAAKE,YAAYD,MACxBE,YAAaH,EAAKE,YAAYC,aAAeH,EAAKI,SAClD,EAIN,MAhFyB,IAGlB,IAAD,MAFJN,MAAM,SAAEO,EAAQ,KAAEC,EAAI,KAAEC,EAAMR,eAAgBC,GAAM,SACpDQ,GACD,EACC,MAAMC,GAA6B,QAAjB,EAAAF,EAAKG,oBAAY,aAAjB,EAAmBT,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACO,SAAUA,EAAUP,MAAOQ,GACjC,2BACEd,UAAU,YACVgB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYb,EAAKE,YAAYD,OAC1C,yBAAID,EAAKE,YAAYY,OAEvB,uBAAKnB,UAAU,QACb,0BACGK,EAAKE,YAAYa,KACdf,EAAKE,YAAYa,KAAKC,KAAIC,GACxB,sBAAIC,IAAKC,IAAUF,GACjBG,MAAO,CACLC,gBAAgB,KAAIC,EAAAA,EAAAA,GAAYL,KAElC,gBAAC,EAAAM,KAAI,CAACC,GAAE,SAAWL,IAAUF,IAASE,IAAUF,OAGpD,OAGR,2BACEQ,wBAAyB,CAAEC,OAAQ1B,EAAK2B,MACxCd,SAAS,gBAEX,2BACA,8BACE,gBAAC,IAAG,QAGR,gBAAC,EAAU,MACX,uBAAKlB,UAAU,iBACb,sBACEyB,MAAO,CACLQ,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACG3B,GACC,gBAAC,EAAAkB,KAAI,CAACC,GAAInB,EAAS4B,OAAOC,KAAMC,IAAI,QAAO,KACtC9B,EAASH,YAAYD,QAI9B,0BACGK,GACC,gBAAC,EAAAiB,KAAI,CAACC,GAAIlB,EAAK2B,OAAOC,KAAMC,IAAI,QAC7B7B,EAAKJ,YAAYD,MAAM,SAM3B,C","sources":["webpack://archive-of-10cheon00/./src/components/utterances.js","webpack://archive-of-10cheon00/./src/templates/blog-post.js"],"sourcesContent":["import * as React from 'react'\n\nclass Utterances extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.commentsEl = React.createRef()\n    this.state = { status: 'pending' }\n  }\n  componentDidMount() {\n    const scriptEl = document.createElement('script')\n    scriptEl.onload = () => this.setState({ status: 'success' })\n    scriptEl.onerror = () => this.setState({ status: 'failed' })\n    scriptEl.async = true\n    scriptEl.src = 'https://utteranc.es/client.js'\n    scriptEl.setAttribute('repo', '10cheon00/10cheon00.github.io')\n    scriptEl.setAttribute('issue-term', 'title')\n    scriptEl.setAttribute('theme', 'github-light')\n    scriptEl.setAttribute('crossorigin', 'anonymous')\n    this.commentsEl.current.appendChild(scriptEl)\n  }\n\n  render() {\n    const { status } = this.state\n\n    return (\n      <div className=\"comments-wrapper\">\n        {status === 'failed' && <div>Error. Please try again.</div>}\n        {status === 'pending' && <div>Loading script...</div>}\n        <div ref={this.commentsEl} />\n      </div>\n    )\n  }\n}\n\nexport default Utterances","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport kebabCase from \"lodash.kebabcase\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Utterances from \"../components/utterances\"\n\nimport stringToRGB from \"../helpers/string-to-rgb\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <div className=\"tags\">\n          <ul>\n            {post.frontmatter.tags\n              ? post.frontmatter.tags.map(tag => (\n                  <li key={kebabCase(tag)} \n                    style={{\n                      backgroundColor:`#${stringToRGB(tag)}`\n                    }}>\n                    <Link to={`/tags/${kebabCase(tag)}`}>{kebabCase(tag)}</Link>\n                  </li>\n                ))\n              : null}\n          </ul>\n        </div>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n      <Utterances />\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["props","commentsEl","React","state","status","componentDidMount","scriptEl","document","createElement","onload","this","setState","onerror","async","src","setAttribute","current","appendChild","render","className","ref","Head","data","markdownRemark","post","title","frontmatter","description","excerpt","previous","next","site","location","siteTitle","siteMetadata","itemScope","itemType","itemProp","date","tags","map","tag","key","kebabCase","style","backgroundColor","stringToRGB","Link","to","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}